1、信号的概念
	基本属性：1、简单 2、不能携带大量信息 3、满足某个特定条件才能发送
	信号机制：A给B发送信号，B收到信号之前执行自己的代码，收到信号后，不管程序执行到什么位置，都要暂停运行，去处理信号，
		处理完毕再继续执行。与硬件中断类似-异步模式。但信号是软件层面上实现中断，早期常被称作"软中断"。
	信号特质：由于信号是通过软件方法实现。其实现手段导致信号有很强延时性。但对于用户来说，这个延时非常短，不易察觉。
	每个进程收到的所有信号，都是由内核负责发送的，内核处理。
	信号4要素：1、编号 2、名称 3、时间 4、默认处理动作
2、产生信号的5种方法
	1、按键产生：如 Ctrl+c(2)SIGINT(终止、中断))、Ctrl+z(20)SIGTSTP(暂停、停止))、Ctrl+\(3)SIGQUIT(退出))
	2、系统调用产生：如 kill、raise、abort
	3、软件条件产生：如 定时器alarm
	4、硬件异常产生：如 非法访问内存(段错误11)SIGSEGV)、除0(浮点数例外8)SIGFPE)、内存对齐出错(总线错误7)SIGBUS)
	5、命令产生：如 kill命令
	递达：递达并且到达进程
	未决：产生和递达之间的状态，主要由于阻塞(屏蔽)导致该装态
	信号的处理方式：
		1、执行默认动作
			1) 终止进程
			2) 终止进程且产生core文件
			3) 忽略
			4) 暂停(stop)
			5) 继续
		2、忽略(丢弃)
		3、捕捉(调用用户处理函数)
	特殊信号9/19不允许捕捉和忽略
	linux内核进程控制块PCB是一个结构体，task_struct，除了包含进程id，状态，工作目录，用户id，组id，文件描述符表，还包含
	了信号相关的信息，主要指阻塞信号集和未决信号集。
	kill：
		int kill(pid_t, int sig);成功 0 失败 -1. (id非法， 信号非法， 普通用户杀死init进程等权级问题)
		sig不推荐直接使用数字，应使用宏名，因为不同操作系统编号可能不同，但名称一致。
		pid > 0: 发送信号给指定的进程 
		pid = 0: 发送信号给与调用kill函数进程属于同一进程组的所有进程。
		pid < 0: 取|pid|发给指定进程组。
		pid = -1:发送给进程有权限发送的系统中所有进程。
		raise(int sig)函数，给当前进程发送指定信号(自己给自己发)成功：0， 失败 非0值
		abort(void)函数，自己给自己发送异常终止信号6)SIGABRT信号，终止并产生core文件，函数无返回。
	alarm函数：
		设置定时器(闹钟)，在指定seconds后，内核会给当前进程发送14)SIGALRM信号，进程收到该信号，默认动作停止。
		每个进程都有且只有一个子进程。
		unsigned int alarm(unsigned int seconds);返回0或剩余的秒数，无失败。
		常用：取消定时器alarm(0),返回旧闹钟剩下的秒数。
		例：alarm(5)->3sec->alarm(4)->5sec->alarm(5)->alarm(0)
		定时，与进程无关(自然定时法)！就绪、运行、挂起(阻塞、暂停)、终止、僵尸...无论进程处于何种状态都计时。
	setitimer函数：
		设置定时器(闹钟)，可替代alarm函数，精度微秒us，可以实现周期定时。
		int setitime(in which, const struct itimerval *new_value, struct itimerval *old_value);成功：0，失败：-1设置errno
		参数：which：指定定时方式
			①自然定时：ITIME REAL -> 14)SIGALRM 计算自然时间
			②虚拟空间计时(用户空间)：ITIMER_VIRTUAL -> 26)SIGVTALRM 只计算进程占用cpu的时间
			③运行时计时(用户+内核)：ITIMER_PROF -> 27)SIGPROF 计算占用cpu及执行系统调用的时间
3、信号集操作函数：
	信号集设定
		sigset_t set; // typedef unsigned long sigset_t;
		int sigemptyset(sigset_t *set);				// 将某个信号集清0						成功：0，失败：-1
		int sigfillset(sigset_t *set); 				// 将某个信号集置1						成功：0，失败：-1
		int sigaddset(sigset_t *set, int signum);	// 将某个信号加入信号集					成功：0，失败：-1
		int sigdelset(sigset_t *set, int signum); 	// 将某个信号清出信号集					成功：0，失败：-1
		int sigismember(const sigset_t *set, int signum); // 判断某个信号是否在信号集中		在集合：1，不在：0，出错：-1
	sigprocmask函数
		int sigprocmask(int how, const sigset_t *set, sigset_t *oldset); // 用来屏蔽信号、解除信号。成功：0，失败：-1，设置errno
		set:传入参数，是一个位图，那个位置为1就表示当前进程屏蔽哪个信号
		oldset:传出参数，保留旧的信号屏蔽集
		how:参数设置：设置当前信号的信号屏蔽字为mask
			1、SIG_BLOCK：当how设置为此值，set表示需要屏蔽的信号，相当于mask = mask|set
			2、SIG_UNBLOCK：当how设置为此值，set表示需要解除屏蔽的信号，相当于mask = mask&~set
			3、SIG_SETMASK：当how设置为此值，set表示用于替代原始屏蔽及新的屏蔽集。相当于mask = set
			   若调用sigprocmask解除了对当前若干个信号的阻塞，则在sigprocmask返回前，至少将其中一个信号递达。
	sigpending函数
		读取当前进程的未决信号集
		int sigpending(sigset_t *set); // set传出参数。返回值：成功：0， 失败：-1，设置errno
	阻塞信号集(信号屏蔽字)：将某些信号加入集合，对他们设置屏蔽，当屏蔽X信号后，该信号的处理将退后(解除屏蔽后)
	未决信号集：
		1、 信号产生，未决信号集中描述该信号的位立即翻转为1，表信号处于未决状态，当信号处理，对应位翻转回为0，这一时刻往往
			非常短暂
		2、 信号产生后由于某些原因(主要是阻塞)不能抵达。这类信号的集合称之为未决信号集。在屏蔽解除前，信号一直处于未决状态。
4、信号的捕捉
	注册信号捕捉函数：
	signal函数
		int signal(int sig, sighandler_t handler);
	sigaction函数(重点)
		int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact); 成功：0，失败：-1，设置errno
		参数：
			act：传入参数，新的处理方式
			oldact：传出参数，旧的处理方式
		struct sigaction
			struct sigaction{
				void (*sa_handler)(int);
				void (*sa_sigaction)(int, siginfo_t *, void *);
				sigset_t sa_mask;
				int sa_flags;
				void (*sa_restorer)(void);
			}
			sa_restorer：该元素是过时的，不应该使用(弃用)
			sa_sigaction：当sa_flags被指定为SA_SIGINFO标志时，使用该信号处理程序。(很少使用)
			重点掌握：
				① sa_handler：指定信号捕捉后的处理函数名(即注册函数)。也可赋值为SIG_IGN表忽略或SIG_DFL表执行默认动作
				② sa_mask：调用信号处理函数时，所要屏蔽的信号集合(信号屏蔽字)。注意：仅在处理函数被调用期间屏蔽生效，是临时性设置。
				③ sa_flags：通常设置为0，表示默认属性。SA_SIGINFO：选用sa_sigaction来指定捕捉函数，SA_INTERRURT：系统调用被信号中断
							后，不重启。SA_RESTART：自动重启。SA_DEFER：不自动屏蔽本信号。
	信号捕捉特性
		1、进程正常运行时，默认PCB中有一个信号屏蔽字，设定为☆，它决定了进程自动屏蔽哪些信号。当注册了某个信号捕捉函数，捕捉到该信
		   号以后，要调用该函数。而该函数有可能执行很长时间，在这期间所屏蔽的信号不由☆来指定。而是用sa_mask来指定。调用完信号处理
		   函数，再恢复☆。
		2、XXX信号捕捉函数执行期间，XXX函数自动被屏蔽。
		3、阻塞的常规信号不支持排队，产生多此只记录一次。(后32个实时信号支持排队)
竟态条件：
	pause函数：
		int puase(void); 返回值：-1并设置errno为EINTR
		调用该函数可以造成进程主动挂起，等待信号唤醒。调用该系统调用的进程将处于阻塞状态(主动放弃cpu)直到有信号递达将其唤醒。
	sleep函数：
	时序竟态：
		前导例
			设想如下场景：
				预睡觉，定时闹钟，希望10分钟后闹铃将自己唤醒
				正常：定时，睡觉，10分钟后被闹钟叫醒。
				异常：闹钟定好后，被唤走，外出劳动，20分钟后劳动结束，回来继续睡觉计划，但劳动期间闹铃已经响过，不会再将我唤醒。
	时序问题分析：
		回顾，借助pause和alarm实现的mysleep函数，设想如下时序：
			1、注册SISALRM信号处理函数
			2、调用alarm(1)函数设定闹钟1秒
			3、函数调用刚结束，开始倒计时一秒。当前进程丢失cpu，内核调度优先级高的进程(有多个)取代当前进程，当前进程无法获得cpu，
			   进入就绪态等待cpu
			4、1秒后，闹钟超时，内核向当前进程发送SIGALRM信号(自然定时法，与进程无关)，高优先级尚未执行完，当前进程任处于就绪状态
			   信号无法处理(未决)
			5、优先级高的进程执行结束，当前进程获得cpu资源，内核调度回当前进程执行，SIGALRM信号递达，信号设置捕捉，执行sig_alarm
			6、信号处理函数执行结束，返回当前进程主控流程，pause()被调用挂起等待。(预等待alarm函数发送的SIGALRM信号将自己唤醒)
			7、SIGALRM函数已经执行完毕，pause不会等到。
	解决时序问题：
		可以通过设置屏蔽SIGALRM的方法来控制程序执行逻辑，但无论如何设置，程序都有可能在"解除信号屏蔽"与"挂起等待信号"这两个操作间
		隙失去cpu资源，除非将这两个操作合并为一个"原子操作"，sigsuspend函数具备这个功能，在对是需要求严格的场合下都应该使用sigsuspend
		替换pause。
		int sigsuspend(const sigset *mask); 挂起等待信号
		sigsuspend函数调用期间，进程信号屏蔽字由参数mask指定
		可将某个信号(如SIGALRM)从临时信号屏蔽字mask中删除，这样在调用sigsuspend时将解除对该信号的屏蔽，然后挂起等待，当sigsuspend
		返回时，进程的信号屏蔽字恢复为原来的值。如果原来对该信号是屏蔽态，sigsuspend函数返回后任然屏蔽该信号。
	竟态总结
		竟态条件，跟系统负载有很紧密关系，体现出信号的不可靠性，系统负载越严重，信号不可靠性越强。
		不可靠由其实现原理所导致，信号是通过软件方式实现(跟内核调度高度依赖，延时性强)，每次系统调用结束后，或中断处理结束后，需通过
		扫描PCB中的未决信号集，来判断是否应处理某个信号，当系统负载过量时，会出现时序混乱。
		这种意外情况只能在编程过程中，提早预见，主动规避，而无法通过gdb调试等其他手段弥补。而且由于该错误不具备规律性，后期捕捉和重现
		很难实现。
	全局变量异步IO
	可重入函数、不可重入函数
		一个程序在被调用期间(尚未调用结束)，由于某种时序又被重复调用，称之为"重入"。根据函数的实现方法，可分为"可重入函数"和"不可重入函数"
		注意事项：
			1、定义可重入函数，函数内不能含有全局变量及static变量，不能使用malloc、free
			2、信号捕捉函数应设计为可重入函数
			3、信号处理程序可以调用的可重入函数可参阅man 7 signal
			4、没有包含在上述列表中的函数大多是不可重入的，其原因为：
				a) 使用静态数据结构
				b) 调用了malloc或free
				c) 是标准I/O函数
SIGCHLD信号：
	SIGCHLD的产生条件
		子进程终止时
		子进程接收到SIGSTOP信号停止时
		子进程处在停止态，接受到SIGCONT后唤醒时
	回收子进程
信号传参：
	sigqueue函数对应kill函数，但可在向指定进程发送信号的同时携带参数。
	int sigqueue(pid_t pid, int sig, const union sigval value);成功：0，失败：-1，设置errno
	union sigval{
		int sival_int;
		void *sival_ptr;
	};
	向指定进程发送指定信号的同时，携带数据。但，如传地址，需注意，不同进程之间虚拟地址空间各自独立，将当前进程地址传递给另一进程没有实际意义。
中断系统调用：
	系统调用可分为两类：慢速系统调用和其他系统调用。
	1、慢速系统调用：可能会使进程永久阻塞的一类。如果在阻塞期间收到一个信号，该系统调用就被中断，不再继续执行(早期)，也可以设定系统调用是否
	   重启。如，read、write、pause、wait...
	2、其他系统调用：getpid、getppid、fork...
	结合pause，回顾慢速系统调用：
		慢速系统调用被中断的行为，实际上就是pause的行为：如，read
			①想中断pause，信号不能被屏蔽。
			②信号的处理方式必须是捕捉(默认、忽略都不可以)
			③中断后返回-1，设置errno为EINTR(表“被信号中断”)
		可修改sa_flags参数来设置被信号中断后系统调用是否重启。SA_INTERRURT不重启。SA_RESTART重启。
		扩展了解：
			sa_flags还有很多可选参数，适用于不同情况。如：捕捉到信号后，在执行捕捉函数期间，不希望自动阻塞该信号，可将sa_flags设置为SA_NODEFER
			除非sa_mask中包含该信号。
终端
	    在linux系统中，用户通过终端登录系统后得到一个Shell进程，在这个终端成为Shell进程的控制终端(Controlling Terminal),进程中，控制终端是保存在
	PCB中的信息，而fork会复制PCB中的信息，因此由Shell进程启动的其他进程的控制终端也是这个终端，默认情况下(没有重定向)，每个进程的标准输入、标准
	输出和标准错误输出都指向控制终端，进程从标准输入读也就是读用户的键盘输入，进程往标准输出或标准错误输出也就是输出到显示器上。信号中还讲过，在
	控制终端输入一些特殊的控制键可以给前台进程发信号，如Ctrl-C表示SIGINT，Ctrl-\表示SIGQUIT。
	Alt+Ctrl+F1、F2、F3、F4、F5、F6字符终端 pts(pseudo terminal slave)指伪终端。
	Alt+F7 图形终端
	SSH、Telnet... 网络终端
终端启动流程：
	    文件I/O中讲过，每个进程都可以通过一个特殊的设备文件dev/tty访问它的控制终端。事实上每个终端设备都对应一个不同的设备文件，/dev/tty提供了一
	个通用的接口，一个进程要访问他的控制终端既可以通过/dev/tty也可以通过该设备所对应的设备文件来访问。ttyname函数可以由文件描述符查出对应的文件名，
	该文件描述符必须指向一个终端设备而不能是任意文件。
		简单来说：一个linux系统启动，大致经理如下的步骤：
		init -> fork -> exec -> getty -> 用户输入账号 -> login -> 输入密码 -> exec -> bash
		硬件驱动程序负责读写实际的硬件设备，比如从键盘读入字符和把字符输出到显示器，线路规程像一个过滤器，对于某些特殊字符并不是让它直接通过，而是
	做特殊处理，比如在键盘上按下Ctrl-z，对应的字符并不会被用户程序的read读到，而是被线路规程截获，解释成SIGTSTP信号发送给前台进程通常会使该进程停止。
	线路规程应该过滤哪些字符和做哪些特殊处理是可以配置的。
	char *ttyname(int fd);由文件描述符查出对应文件名。
	TCP/IP协议栈：在数据包上添加报头
	    如果telnet客户端和服务器之间的网络延迟比较大，我们会观察到按下一个键后要过几秒种才能回显到屏幕上。这说明我们每按一个键Telnet客户端都会立刻把
	该字符发送给服务器，然后这个字符经过伪终端主设备和从设备之后被shell进程读取，同时回显到伪终端从设备，回显的字符再经过伪终端主设备、telnetd服务器
	和网络发回给telnet客户端，显示给用户看。也许你会觉得吃惊，但真的这样，每按一个键都要在网络上走一个来回。
进程组
	概念和特性
		进程组，也称之为作业。BSD于1980年前后向Unix中增加了一个新特性。代表一个或多个进程的集合。每个进程都属于一个进程组。在waitpid函数和kill函数中
		曾使用到。操作系统设计的进程组的概念，是为了简化对多个进程的管理。
		当父进程创建子进程的时候，默认父进程与子进程属于同一个进程组。进程组ID==第一个进程ID(组长ID)。所以组长进程标识：其进程组ID==其进程ID。
		可以使用kill-SIGKILL-进程组ID(负的)来将整个进程组内的进程全部杀死。
		组长进程可以创建一个进程组，创建该进程组中的进程，然后终止。只要进程组中有一个进程存在，进程组就存在，与组长进程是否结束无关。
		进程组生存期：进程组创建到最后一个进程离开(终止或转移到另一进程组)。
		一个进程可以为自己或子进程设置进程组ID。
	进程组操作函数
		getpgrp函数
			获取当前进程的进程组ID
				pid_t getpgrp(void);总是返回调用者的进程组ID
		getpgid函数
			获取指定进程的进程组ID
				pid_t getpgid(pid_t pid);成功：0，失败：-1，设置errno
				如果pid=0，那么该函数作用和getpgrp一样。
		setpgid函数
			改变进程默认所属的进程组，通常可用来加入一个现有的进程组或创建一个新的进程组。
				int setpgid(pid_t pid, pid_t pgid);成功：0，失败：-1，设置errno
				将参数1对应的进程加入参数2对应的进程组中。
				注意：
					1、如果改变子进程为新的组，应fork后，exec前。
					2、权级问题。非root进程只能改变自己创建的子进程，或有权限操作的进程。
会话
	创建会话
		创建一个会话需要注意以下6点注意事项：
			1、调用进程不能是进程组组长，该进程会变成新会话首进程(session header)。
			2、该进程成为一个新进程组的组长进程。
			3、需有root权限(ubuntu不需要)
			4、新会话丢弃原有的控制终端，该会话没有控制终端
			5、该调用进程是组长进程，则出错返回
			6、建立新会话时，先调用fork，父进程终止，子进程调用setsid
	getsid函数
		获取进程所属的会话ID
			pid_t getsid(pid_t pid); 成功：返回调用进程的会话ID，失败：-1，设置errno
			pid为0表示查看当前进程session ID
			ps ajx命令查看系统中的进程。参数a表示不仅列当前用户的进程，也列出所有其他用户的进程，参数x表示不仅列有控制终端的进程，也列出
			所有无控制终端的进程，参数j表示列出与作业控制相关的信息。
			组长进程不能成为新会话首进程，新会话首进程必定成为组长进程。
	setsid函数
		创建一个会话，并以自己的ID设置进程组ID，同时也是新会话的ID。
			pid_t setsid(void);成功：返回调用进程的会话ID，失败：-1，设置errno
			调用了setsid函数的进程，既是新的会长也是新的组长。
守护进程
	Daemon(精灵)进程，是linux中的后台服务进程，通常独立于控制终端并且周期性地执行某种任务或等待某些发生的事情。一般以d结尾的名字。
	linux后台的一些系统服务进程，没有控制终端，不能直接和用户交互。不受用户登录、注销的影响，一直在运行着，他们都是守护进程。如：预读入缓输出机制的
	实现：ftp服务器、nfs服务器等。
	创建守护进程，最关键的一步是调用setsid函数创建一个新的Session，并成为新的Session Leader。
创建守护进程模型
	1、创建子进程，父进程退出。
		所有工作在于子进程中进行形式上脱离了控制终端
	2、在子进程中创建新会话
		setsid()函数
		使子进程完全独立出来，脱离控制
	3、改变当前目录为根目录
		chdir()函数
		防止占用可卸载的文件系统
		也可换成其他路径
	4、重设文件权限掩码
		umask()函数
		防止继承的文件创建屏蔽字拒绝某些权限
		增加守护进程的灵活性
	5、关闭文件描述符
		继承的打开文件不会用到，浪费系统资源，无法卸载
	6、开始执行守护进程核心工作
	7、守护进程退出处理程序模型
	编写一个守护进程：
Linux常规信号一览表
	1) SIGHUP: 当用户退出shell时，由该shell启动的所有进程将收到这个信号，默认动作为终止进程
	2) SIGINT：当用户按下了<Ctrl+C>组合键时，用户终端向正在运行中的由该终端启动的程序发出此信号。默认动作为终止进程。
	3) SIGQUIT：当用户按下<ctrl+\>组合键时产生该信号，用户终端向正在运行中的由该终端启动的程序发出些信号。默认动作为终止进程。
	4) SIGILL：CPU检测到某进程执行了非法指令。默认动作为终止进程并产生core文件
	5) SIGTRAP：该信号由断点指令或其他 trap指令产生。默认动作为终止里程 并产生core文件。
	6) SIGABRT: 调用abort函数时产生该信号。默认动作为终止进程并产生core文件。
	7) SIGBUS：非法访问内存地址，包括内存对齐出错，默认动作为终止进程并产生core文件。
	8) SIGFPE：在发生致命的运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为0等所有的算法错误。默认动作为终止进程并产生core文件。
	9) SIGKILL：无条件终止进程。本信号不能被忽略，处理和阻塞。默认动作为终止进程。它向系统管理员提供了可以杀死任何进程的方法。
	10) SIGUSE1：用户定义 的信号。即程序员可以在程序中定义并使用该信号。默认动作为终止进程。
	11) SIGSEGV：指示进程进行了无效内存访问。默认动作为终止进程并产生core文件。
	12) SIGUSR2：另外一个用户自定义信号，程序员可以在程序中定义并使用该信号。默认动作为终止进程。
	13) SIGPIPE：Broken pipe向一个没有读端的管道写数据。默认动作为终止进程。
	14) SIGALRM: 定时器超时，超时的时间 由系统调用alarm设置。默认动作为终止进程。
	15) SIGTERM：程序结束信号，与SIGKILL不同的是，该信号可以被阻塞和终止。通常用来要示程序正常退出。执行shell命令Kill时，缺省产生这个信号。默认动作为终止进程。
	16) SIGSTKFLT：Linux早期版本出现的信号，现仍保留向后兼容。默认动作为终止进程。
	17) SIGCHLD：子进程结束时，父进程会收到这个信号。默认动作为忽略这个信号。
	18) SIGCONT：如果进程已停止，则使其继续运行。默认动作为继续/忽略。
	19) SIGSTOP：停止进程的执行。信号不能被忽略，处理和阻塞。默认动作为暂停进程。
	20) SIGTSTP：停止终端交互进程的运行。按下<ctrl+z>组合键时发出这个信号。默认动作为暂停进程。
	21) SIGTTIN：后台进程读终端控制台。默认动作为暂停进程。
	22) SIGTTOU: 该信号类似于SIGTTIN，在后台进程要向终端输出数据时发生。默认动作为暂停进程。
	23) SIGURG：套接字上有紧急数据时，向当前正在运行的进程发出些信号，报告有紧急数据到达。如网络带外数据到达，默认动作为忽略该信号。
	24) SIGXCPU：进程执行时间超过了分配给该进程的CPU时间 ，系统产生该信号并发送给该进程。默认动作为终止进程。
	25) SIGXFSZ：超过文件的最大长度设置。默认动作为终止进程。
	26) SIGVTALRM：虚拟时钟超时时产生该信号。类似于SIGALRM，但是该信号只计算该进程占用CPU的使用时间。默认动作为终止进程。
	27) SGIPROF：类似于SIGVTALRM，它不公包括该进程占用CPU时间还包括执行系统调用时间。默认动作为终止进程。
	28) SIGWINCH：窗口变化大小时发出。默认动作为忽略该信号。
	29) SIGIO：此信号向进程指示发出了一个异步IO事件。默认动作为忽略。
	30) SIGPWR：关机。默认动作为终止进程。
	31) SIGSYS：无效的系统调用。默认动作为终止进程并产生core文件。
	34) SIGRTMIN ～ (64) SIGRTMAX：LINUX的实时信号，它们没有固定的含义（可以由用户自定义）。所有的实时信号的默认动作都为终止进程。























