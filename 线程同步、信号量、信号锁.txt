同步概念
		所谓同步，即同时起步，协调一致。不同的对象，对“同步”的理解方式略有不同。如，设备同步，是指在两个设备之间规定一个共同的时间参考；
	数据库同步，是指让两个或多个数据库内容保持一致，或者按需要部分保持一致；文件同步，是指让两个或多个文件夹里的文件保持一致。等等。
		而，编程中、通信中所说的同步与生活中印象中的同步概念略有差异，“同”字应是指协同、协助、互相配合。主旨在协同步调，按预定的先后次序
	运行。
线程同步
		同步即协同步调，按预定的先后次序运行。
		线程同步，按一个线程发出某一功能调用开始，在没有得到结果前，该调用不反回。同时其他线程为保证数据一致性，不能调用该功能。
	举例1：银行存款5000。柜台，折：取3000；提款机，卡：取3000。剩余2000
	举例2：内存中100字节，线程T1预填入全1，线程T2预填入全0。但如果T1执行了50字节失去cpu，T2执行，会将T1写过的内容覆盖。当T1再次获得cpu继
	续从失去cpu位置向后写入1，当执行结束，内存中的100字节，既不全是1，也不全是0。
		产生的现象叫做“与时间有关的错误”(time related)。为了避免与时间有关的错误。实际上，不仅线程间需要同步，进程间、信号间等等都需要同
	步机制。
		因此，所有“多个控制流，共同操作一个共享资源”的情况都需要同步。
互斥量mutex
		Linux中提供一把互斥锁(也称之为互斥量)
		每个线程在对资源操作前都尝试先加锁，成功加锁才能操作，操作结束解锁。
		资源还是共享的，线程间也还是竞争的。
		但通过“锁”就将资源的访问变成互斥操作，而后与时间有关的错误也不会再产生了。
		但，应注意：同一个时刻，只能有一个线程持有该锁。
		当A线程对某个全局变量加锁访问，B在访问前尝试加锁，拿不到锁，B阻塞。C线程不去加锁，而直接访问该全局变量，依然能够访问，但会出现数
	据混乱。
		所以，互斥锁实质上是操作系统提供的一把“建议锁”(又称“协同锁”)，建议程序中有多线程访问共享资源的时候使用该机制。但，并没有强制限定。
		因此，即使有了mutex。如果有线程不按规则来访问数据，依然会造成数据混乱。
	主要应用函数
		pthread_mutex_init函数
		pthread_mutex_destroy函数
		pthread_mutex_lock函数
		pthread_mutex_trylock函数
		pthread_mutex_unlock函数
		以上5个函数返回值都是：成功返回0，失败返回错误号。
		pthread_mutex_t类型，其本质是一个结构体。简化理解，应用时可忽略其实现细节，简单当成整数看待。
		pthread_mutex)t mutex，变量mutex只有两种取值1、0。
		pthread_mutex_init函数
			初始化一个互斥锁(互斥量)-->初始可看作1
			int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
			参1：传出参数，调用时应传&mutex
				restrict关键字：只用于限制指针，告诉编译器，所有修改该指针指向内存中内容的操作，只能通过本指针完成。不能通过除本指针以外的其
			他变量或指针修改。
			参2：互斥量属性，是一个传入参数，通常传NULL，选用默认属性(线程间共享)。参APUE.12.4同步属性
				1、静态初始化，如果互斥锁mutex是静态分配的(定义在全局，或者加了static关键字修饰)，可以直接使用宏进行初始化。
				   e.g. pthread_mutex_t mutex=PTHREAD_MUTEX_INITIALIZER；
				2、动态初始化；局部变量应采用动态初始化：e.g. pthread_mutex_init(&mutex, NULL);
		pthread_mutex_destroy函数
			销毁一个互斥锁
			int pthread_mutex_destroy(pthread_mutex_t *mutex);
		pthread_mutex_lock函数
			加锁，可以理解为将mutex--(或-1)
			int pthread_mutex_lock(pthread_mutex_t *mutex);
		pthread_mutex_unlock函数
			解锁，可以理解为将mutex++(或+1)
		pthread_mutex_trylock函数
			尝试加锁
			int pthread_mutex_trylock(pthread_mutex_t *mutex);
加锁与解锁
	lock与unlock：
		lock尝试加锁，如果加锁不成功，线程阻塞，阻塞到持有该互斥量的其他线程解锁为止。
		unlock主动解锁函数，同时将阻塞在该锁上的所有线程全部唤醒，至于哪个线程先被唤醒，取决于优先级、调度。默认：先阻塞、先唤醒。
		例如：T1、T2、T3、T4使用同一把mutex锁，T1加锁成功，其他线程均阻塞，直至T1解锁。T1解锁后，T2、T3、T4均被唤醒，并自动尝试加锁。
		可假想mutex锁init成功初始值为1。lock功能是将mutex--。unlock将mutex++
	lock与trylock
		lock加锁失败会阻塞，等待锁释放。
		trylock加锁失败直接返回错误号(如：EBUSY)，不阻塞。
	在访问共享资源前加锁，访问结束后立即加锁。锁的“粒度”应越小越好。
死锁
	1、线程试图对同一个互斥量A加锁两次
	2、线程1拥有A锁，请求获得B锁；线程2拥有B锁，请求获得A锁
读写锁
	与互斥锁类似，但读写锁允许更高的并行性。其特性为：写独占，读共享。
	读写锁状态：
		一把读写锁具备三种状态：
			1、读模式下加锁状态(读锁)
			2、写模式下加锁状态(写锁)
			3、不加锁状态
	读写锁特性
		1、读写锁是“写模式加锁”时，解锁前，所有对该锁加锁的线程都会被阻塞。
		2、读写锁是“读模式加锁”时，如果线程以读模式对其加锁会成功，如果线程以写模式加锁会阻塞。
		3、读写锁是“读模式加锁”时，既有以写模式加锁的线程，也有试图以读模式加锁的线程。那么读写锁会阻塞随后的读模式锁请求。优先满足写模式锁。
		   读锁、写锁并行阻塞，写锁优先级高
		读写锁也叫共享-独占锁。当读写锁以读模式锁住时，它是以共享模式锁住的；当它以写模式锁住时，它是以独占模式锁住的。写独占、读共享。
		读写锁非常适用于对数据结构读的次数远大于写的情况。
	主要应用函数
		pthread_rwlock_init函数
		pthread_rwlock_destroy函数
		pthread_rwlock_rdlock函数
		pthread_rwlock_wrlock函数
		pthread_rwlock_tryrdlock函数
		pthread_rwlock_trywrlock函数
		pthread_rwlock_unlock函数
		以上七个函数的返回值都是：成功返回0，失败直接返回错误号
		pthread_rwlock_t类型：用于定义一个读写锁变量
		pthread_rwlock_t rwlock
条件变量
	条件变量本身不是锁！但也可以造成线程阻塞。通常与互斥锁配合使用。给多线程提供一个汇合点场所。
	主要函数：
		pthread_cond_init函数
		pthread_cond_destroy函数
		pthread_cond_wait函数
		pthread_cond_timedwait函数
		pthread_cond_signal函数
		pthread_cond_broadcast函数
		以上6个函数返回值都是：成功返回0，失败返回错误号。
		pthread_cond_t类型，用于定义条件变量
		pthread_cond_t cond;
	pthread_cond_wait函数
		阻塞等待一个条件变量
		int pthread_cond_wait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex);
		函数作用：
			1、阻塞等待条件变量cond满足
			2、释放已掌握的互斥锁(解锁互斥量)相当于pthread_mutex_unlock(&mutex);
				1、2两个步骤为一个原子操作
			3、当被唤醒，pthread_cond_wait函数返回水，解除阻塞并重新申请获得互斥锁pthread_mutex_lock(&mutex);
	pthread_cond_timedwait函数
		限时等待一个条件变量
		int pthread_cond_timedwait(pthread_cond_t *restrict cond, pthread_mutex_t *restrict mutex, const struct timespec *restrict abstime);
		struct timespace{
			time_t tv_sec;	// 	秒
			long tv_nsec;	//	纳秒
		}
	pthread_cond_signal函数
		唤醒至少一个阻塞在条件变量上的线程
		int pthread_cond_signal(pthread_cond_t *cond);
	pthread_cond_broadcast函数
		唤醒全部阻塞在条件变量上的线程
		int pthread_cond_broadcast(pthread_cond_t *cond);
	生产消费者条件变量模型
			线程同步典型的案例即为生产消费者模型，而借助条件变量来实现这一模型，是比较常见的一种方法。假定有两个线程，一个模拟生产者行为一个
		模拟消费者行为。两个线程同时操作一个共享资源(一般称之为汇聚)。生产向中添加产品，消费者从中消费掉产品。
	条件变量的优点
			相较于mutex而言，条件变量可以减少竞争。
			如直接使用mutex，除了生产者、消费者之间要竞争互斥量以外，消费者之间也需要竞争互斥量，但如果汇聚(链表)中没有数据，消费者之间竞争互
		斥锁是没有意义的。有了条件变量机制以后，才会引起消费者之间的竞争。提高了程序效率。
信号量
	进化版的互斥锁(1-->N)
		由于互斥锁的粒度比较大，如果我们希望在多个线程间对某一对象的部分数据进行共享，使用互斥锁是没有办法实现的，只能将整个数据对象锁住。这样
	虽然达到了多线程操作共享数据时保证数据正确性的目的，却无形中导致线程的并发性下降。线程从并行执行变成了串行执行。与直接使用单进程无异。
		信号量，是相对折中的一种处理方式，既能保证同步，数据不混乱，又能提高线程并发。
	主要应用函数
		sem_init函数
		sem_destroy函数
		sem_wait函数
		sem_trywait函数
		sem_timedwait函数
		sem_post函数
		以上6个函数的返回值都是：成功返回0，失败返回-1，同时设置errno(注意，它们没有pthread前缀)
		sem_t类型，本质仍是结构体。但应用期间可简单看做整数，忽略实现细节(类似于使用文件描述符)
		sem_t sem;规定信号量sem不能<0，头文件<semaphore.h>
	信号量基本操作
		sem_wait：	1、信号量大于0，则信号量--	(类比pthread_mutex_lock)
			|		2、信号量等于0，造成线程阻塞
		   对应
		    |
		sem_post：	将信号量++，同时唤醒阻塞在信号量上的线程	(类比pthread_mutex_unlock)
		但，由于sem_t的实现对用户隐藏，所以所谓的++、--操作只能通过函数来实现，而不能直接++、--符号。
		信号量的初值，决定了占用信号量的线程个数。
	sem_init函数
		初始化一个信号量
		int sem_init(sem_t *sem, int pshared, unsigned int value);
		参1、sem信号量
		参2、pshared取0用于线程间；取非0(一般为1)用于进程间
		参3、value指定信号量的初值
	sem_destroy函数
		销毁一个信号量
		int sem_destroy(sem_t *sem);
	sem_wait函数
		给信号量加锁--
		int sem_wait(sem_t *sem);
	sem_post函数
		给信号量解锁++
		int sem_post(sem_t *sem);
	sem_trywait函数
		尝试给信号量加锁--
		int sem_trywait(sem_t *sem)
	sem_timedwait函数
		int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
进程间同步
	互斥量mutex
		进程间也可以使用互斥锁，来达到同步的目的，但应在pthread_mutes_init初始化之前，修改其属性为进程间共享。mutex的属性修改函数主要有以下几个。
	主要应用函数
		pthread_mutexattr_t mattr类型：		用于定义mutex锁的属性
		pthread_mutex_init函数：			初始化一个mutex属性对象
			int pthread_mutex_init(pthread_mutexattr_t *attr);
		pthread_mutexattr_destroy函数：		销毁mutex属性对象(而非销毁锁)
			int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
		pthread_mutexattr_setpshared函数：	修改mutex属性
			int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
			参2：pshared取值：
				线程锁：PTHREAD_PROCESS_PRIVATE(mutex的默认属性即为线程锁)
				进程锁：PTHREAD_PROCESS_SHARED
文件锁
	借助fcntl函数来实现锁机制。操作文件的进程没有获得锁时，可以打开，但无法执行read、write操作。
	fcntl函数：获取、设置文件访问控制属性。
	int fcntl(int fd, int cmd, .../*arg*/);
	参2：
		F_SETLK(struct flock*) 设置文件锁(trylock)
		F_SETLKW(struct flock*) 设置文件锁(lock)W-->wait
		F_GETLK(struct flock*) 获取文件锁
	参3：
		struct flcok{
			...
			short l_type;		// 锁的类型：F_RDLCK、F_WRLCK、F_UNLCK
			short l_whence;		// 偏移位置：SEEK_SET、SEEK_CUR、SEEK_END
			off_t l_start;		// 起始偏移1000
			off_t l_len;		// 长度：0表示整个文件加锁
			pid_t pid;			// 持有该锁的进程ID：(F_GETLK only)
			...
		};
		多线程间共享文件描述符，而给文件加锁，是通过改文件描述符所指向的文件结构体中的成员变量来实现的。因此，多线程中无法使用文件锁。
