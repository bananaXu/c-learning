线程概念
	什么是线程
		LWP：light weight process轻量级的进程，本质仍是进程(在linux环境下)
		进程：独立地址空间，拥有PCB
		线程：也有PCB，但没有独立的地址空间(共享)
		区别：在于是否共享地址空间。 独居(进程)；合租(线程)；
		Linux下：
			线程：最小的执行单位
			进程：最小分配资源单位，可看成是只有一个线程的进程。
	Linux内核线程实现原理
		类Unix系统中，早期是没有“线程”概念的，80年代才引入，借助进程机制实现出了线程的概念。因此在这类系统中，进程和线程关系紧密。
		1、轻量级进程(light-weight process)，也有PCB，创建线程使用的底层函数和进程一样，都是clone
		2、从内核里看线程和进程是一样的，都有各自不同的PCB，但是PCB中指向内存资源的三级页表都是相同的
		3、进程可以蜕变成线程
		4、线程可以看做寄存器和栈的集合
		5、在linux下，线程是最小的执行单位，进程是最小的分配资源单位
	察看LWP号：ps -Lf pid 查看指定线程的lwp号
	线程共享资源
		1、文件描述符表
		2、每种信号处理方式
		3、当前工作目录
		4、用户ID和组ID
		5、内存地址空间(.test/.data/.bss/heap/共享库)
	线程非共享资源
		1、线程ID
		2、处理器现场和栈指针(内核栈)
		3、独立的栈空间(用户空间栈)
		4、errno变量
		5、信号屏蔽字
		6、调度优先级
	线程优缺点
		优点：	1、提高程序并发性	2、开销小	3、数据通信、共享数据方便
		缺点：	1、库函数，不稳定	2、调试、编写困难、gdb不支持	3、对信号支持不好
		优点相对突出，缺点均不是硬伤。linux下由于实现方法导致进程、线程差别不是很大
线程控制原语
	pthread_self函数
		获取线程ID，其作用对应进程中getpid()函数。
		pthread_t pthread_self(void)；返回值：成功：0，失败：无
		线程ID：pthread_t类型，本质：在linux下为无符号整数(%lu)，其他系统中可能是结构体实现
		线程ID是进程内部，识别标志。(两个进程间，线程ID允许相同)
		注意：不应使用全局变量pthread_t tid，在子线程中通过pthread_create传出参数来获取线程ID，而应使用pthread_self
	pthread_create函数
		创建一个新线程。 其作用对应进程中fork()函数
		int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
		返回值：成功：0；失败：错误号	linux环境下，所有线程特点，失败均直接返回错误号
		参数：
			pthread_t：当前linux中可理解为：typedef unsigned long int pthread_t。
			参数1：传出参数，保留系统为我们分配好的线程ID
			参数2：通常传NULL，表示使用线程默认属性。若想使用具体属性也可修改该参数。
			参数3：函数指针，指向线程主函数(线程体)，该函数运行结束，则线程结束。
			参数4：线程主函数执行期间所使用的参数。
			在一个线程中调用pthread_create()创建新的线程后，当前进程从pthread_create()返回继续往下执行，而新的线程所执行的代码
		由我们传给pthread_create的函数指针start_routine决定。start_routine函数接收一个参数，是通过pthread_create的arg参数传递给
		它的，该参数的类型为void *，这个指针按什么类型解释由调用者自己定义。start_routine的返回值类型也是void *，这个指针的含义
		同样由调用者自己定义。start_routine返回时，这个线程就退出了，其它线程可以调用pthread_join得到start_routine的返回值，类似
		于父进程调用wait(2)得到子进程的退出状态。
			pthread_create成功返回后，新创建的线程id被填写到thread参数所指向的内存单元。我们知道进程id的类型是pid_t，每个进程的
		id在整个系统中是唯一的，调用getpid(2)可以获得当前进程的id，是一个正整数值，线程id的类型是thread_t，它只在当前进程中保证
		是唯一的，在不同的系统中thread_t这个类型有不同的实现，它可能是一个整数值，也可能是一个结构体，也可能是一个地址，所以不能
		简单地当成整数用printf打印，调用pthread_self(3)可以获得当前线程的id。
			attr参数表示线程属性，传NULL表示线程属性取决缺省值，感兴趣可参考APUE
	线程与共享
		线程间共享全局变量，线程默认共享数据段、代码段等地址空间，常用的是全局变量。而进程间不共享全局变量，只能借助mmap。
	pthread_exit
		将单个线程退出
		void pthread_exit(void *retval); 参数：retval表示线程退出状态，通常传NULL
		线程中禁止使用exit函数，会导致进程内所有线程全部退出
	pthread_join
		阻塞等待线程退出，获得进程状态	其作用，对应进程waitpid函数
		int pthread_join(pthread_t thread, void **retval); 成功：0，失败：错误号
		参数thread：线程ID，retval：存储线程结束状态
	对比记忆：
		进程中：main返回值、exit参数-->int；等待子进程结束wait函数参数-->int *
		线程中：线程主函数返回值、pthread_exit-->void *;等待线程结束pthread_join函数参数:-->void **
	pthread_detach
		实现线程分离
		int pthread_detach(pthread_t thread); 成功：0，失败：错误号
		线程分离状态：指定该状态，线程主动与主控线程断开关系。线程结束后，其退出状态不由其他线程获取，而直接自己释放。网络、多线程服务器常用。
		进程若有该机制，将不会产生僵尸进程。僵尸进程的产生主要由于进程死后，大部分资源被释放，一点残留资源仍在系统中，导致内核认为该进程仍存在。
		也可以使用pthread_create函数参2(线程属性)来设置线程分离。
		不能对被置为deach的线程调用pthread_jion，这样调用将返回EINVAL错误。
	pthread_cancel函数
		杀死线程	其作用，对应进程中kill函数
		int pthread_cancel(pthread_t thread);	成功：0，失败：错误号
		线程的取消不是实时的，而是有一定延时。需要等待线程达到某个取消点(检查点)。
		取消点：是线程检查是否被取消，并安请求进行动作的一个位置。通常是一些系统调用create、open、pause、close、read、write...，执行命令man 7 pthreads
		可以查看具备这些取消点的系统调用列表。
		被取消的线程，退出值定义在linux的pthread库中。常数PTHREAD_CANCELED的值是-1，可在头文件pthread.h中找到他的定义，#define PTHREAD_CANCELED((void *) -1)
		因此当我们对一个已经被取消的进程使用pthread_join回收时，得到的返回值是-1。
		pthread_testcalcel()函数，自己添加取消点
	pthread_equal()函数
		比较两个线程ID是否相等。
		int pthread_equal(pthread_t thread1, pthread_t thread2);
		有可能Linux在未来线程ID pthread_t类型被修改为结构体实现
线程属性
	Linux线程属性是可以根据实际项目需要，进行设置，默认属性已经可以解决绝大多数开发时遇到的问题。如果我们对程序的性能提出更高的要求那么需要设置线程属性，
	比如可以通过设置线程栈的大小来降低内存的使用，增大线程个数。
	typedef struct
	{
		int 				etachstate;		//线程的分离状态
		int					schedpolicy;	//线程调度策略
		struct sched_param  schedparam;		//线程的调度参数
		int 				inheritsched;	//线程的继承性
		int 				scope;			//线程的作用域
		size_t				guardsize;		//线程栈末尾的警戒缓冲区大小
		int 				stackaddr_set;	//线程栈的设置
		void *				stackaddr;		//线程栈的位置
		size_t				stack_size;		//线程栈的大小
	}pthread_attr_t;
	主要结构体成员：
		1、线程分离状态
		2、线程栈大小(默认平均分配)
		3、线程栈警戒缓冲区大小(位于栈末尾)
		属性值不能直接设置，须使用相关函数进行操作，初始化的函数为pthread_attr_init，这个函数必须在pthread_create函数之前调用，之后须用pthread_attr_destroy
		函数来释放资源。
		线程属性主要包括如下属性：作用域、栈尺寸、栈地址、优先级、分离的状态、调度的策略和参数。默认的属性为非绑定、非分离、缺省的堆栈、与父进程同样级别的
		优先级。
	线程属性初始化：
		注意：应先初始化线程属性，再pthread_create创建线程
		初始化线程属性
			int pthread_attr_init(pthread_attr_t *attr); 成功：0，失败：错误号
		销毁线程属性所占用的资源
			int pthread_attr_destroy(pthread_attr_t *attr); 成功：0，失败：错误号
	线程的分离状态：
		线程的分离状态决定一个线程以什么样的方式来终止自己
		非分离状态：线程的默认属性是非分离状态，在这种情况下，原有的线程等待创建的线程结束。只有当pthread_join()函数返回时，创建的线程才算终止，才能释放自己
		所占用的系统资源。
		分离状态：分离线程没有被其他线程所等待，自己运行结束了，线程也就终止了，马上释放系统资源。应该根据自己的需要，选择适当的分离状态。
		线程分离状态的函数：
			int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate); // 设置线程属性，线程分离或非分离
			int pthread_attr_getdetachstate(pthread_attr_t *attr, int detachstate); // 获取线程属性
			参数：
				attr：已初始化的线程属性
				detachstate：PTHREAD_CREATE_DETACHED(分离线程)
							 PTHREAD_CREATE_JIONABLE(非分离线程)
			注意一点：如果设置一个线程为分离线程，而这个线程又运行非常快，它很可能在pthread_create函数返回之前就终止了，它终止以后就可能将线程号和系统资源移
			交给其他线程使用，这样调用pthread_create的线程就得到了错误的线程号。要避免这种情况可以采取一定的同步措施，最简单的方法之一就是可以在被创建的线程
			里调用pthread_cond_timedwait函数，让这个线程等待一会儿，留出足够的时间让函数pthread_create返回。设置一段等待时间，是在多线程编程里常用的方法。但
			注意不要使用诸如wait()之类的函数，它们是使整个进程睡眠，并不能解决线程同步的问题。
	线程的栈地址
		POSIX.1定义了两个常量_POSIX_THREAD_ATTR_STACKADDR和_POSIX_THREAD_ATTR_STACKSIZE检测系统是否支持栈属性。也可以给sysconf函数传递_SC_THREAD_ATTR_STACKADDR
		或_SC_THREAD_ATTR_STACKSIZE来进行检测。
		当前进程栈地址空间不足时，指定新建线程使用由malloc分配的空间作为自己的栈空间。通过pthread_attr_setstack和pthread_attr_getstack两个函数分别设置和获取线程
		的栈地址。
		int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize);成功：0，失败：错误号
		int pthread_attr_getstack(pthread_attr_t *attr, void **stackaddr, size_t stacksize);成功：0，失败：错误号
		参数：
			attr：指向一个线程属性的指针
			stackaddr：返回获取的栈地址
			stacksize：返回获取的栈大小
	线程的栈大小
		当系统中有很多线程时，可能需要减小每个线程栈的默认大小，防止进程的地址空间不够用，当线程调用的函数分配很大的局部变量或者函数调用层次很深时，可能需要增大
		线程的默认大小。
		函数pthread_attr_getstacksize和pthread_attr_setstacksize提供设置
		int pthread_attr_getstacksize(pthread_attr_t *attr, size_t stacksize); 成功：0，失败：错误号
		int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize); 成功：0，失败：错误号
	NPTL
		1、查看当前pthread库版本getconf GUN_LIBPTHREAD_VERSION
		2、NPTL实现机制(POSIX)，Native POSIX Thread Library
		3、使用线程库时gcc指定-lpthread
注意事项
	1、主线程退出其他线程不退出
	2、避免僵尸线程
		pthread_join
		pthread_detach
		pthread_create指定分离属性
		被join线程可能在join函数返回前就释放完自己的所有内存资源，所有不应当返回被回收线程栈中的值
	3、malloc和mmap申请的内存可以被其他线程释放
	4、应避免在多线程模型中调用fork，除非马上exec，子进程中只有调用fork的线程存在，其他线程在子进程中均pthread_exit
	5、信号的复杂语义很难和多线程共存，应避免在多线程引入信号机制
