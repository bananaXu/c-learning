网络基础
	协议的概念
	什么是协议
		从应用的角度出发，协议可以理解为“规则”，是数据传输和数据理解的规则。
		假设，A、B双方欲传输文件。规定：
		第一次，传输文件名，接受到对方文件名，应答ok给传输方；
		第二次，发送文件的尺寸，接收方接受到该数据再次应答一个ok；
		第三次，传输文件内容。同样，接收方接收数据完成后应答ok表示文件接收成功。
		因此，无论A、B之间传输何种文件，都是通过三次数据传输来完成的。A、B之间形成了一个最简单的数据传输规则。双方都按此规则
	发送、接收数据。A、B之间达成这个互相遵守的规则即为协议。
		这种仅在A、B之间被遵守的协议称之为原始协议。当此协议被更多的人采用，不断的增加、改进、维护、网、完善。最终形成一个稳
	定的、完整的文件传输协议，被广泛应用于各种文件传输过程中。该协议就成为一个标准协议。最早的ftp协议就是由此诞生而来。
		TCP协议注重数据的传输，http协议注重于数据的解释。
典型协议
		传输层：常见协议有TCP/UDP协议。
		应用层：常见的协议有HTTP协议、FTP协议。
		网络层：常见的协议有IP协议、ICMP协议、IGMP协议。
		网络接口层：常见的协议有ARP协议、RARP协议。
		TCP传输控制协议(Transmission Control Protocol)是一种面向连接的、可靠的、基于字节流的传输层通信协议。
		UDP用户数据报协议(User Datagram Protocol)是OSI参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。
		HTTP超文本传输协议(Hyper Text Transfer Protocol)是互联网上应用最为广泛的一种网络协议。
		FTP文件传输协议(File Transfer Protocol)
		IP协议是因特网互联协议(Internet Protocol)
		ICMP协议是Internet控制报文协议(Internet Control Message Protocol)它是TCP/IP协议族的一个子协议。用于在IP主机、路由器之
	间传递控制消息。
		IGMP协议是Internet组管理协议(Internet Group Management Protocol)是因特网协议家族中的一个组播协议。该协议运行在主机和组
	播路由器之间。
		ARP协议是正向地址解析协议(Address Resolution Protocol)通过已知的IP，寻找对应主机的MAC地址。
		RARP是反向地址转换协议，通过MAC地址确定IP地址。
网络应用程序设计模式
	C/S模式
		传统的网络设计应用模式，客户机(client)/服务器(sever)模式。需要在通讯两端各自部署客户节和服务器来完成数据通信。
	B/S模式
		浏览器(browser)/服务器模式(sever)。只需在一端部署服务器，而另一端使用每台pc都默认配置的浏览器即可完成数据传输。
	优缺点
		对于C/S模式来说，其优点明显。客户端位于目标主机上可以保证性能，将数据缓存到客户端本地，从而提高数据传输效率。且客户端和
	服务器有一个开发团队创作创作，所以他们之间所采用的协议相对灵活。可以在标准协议的基础上根据需求裁剪以及制定。例如，腾讯公司所
	采用的通信协议，即为ftp协议的修改裁剪版。
		因此，传统的网络应用协议及较大型的网络应用程序都首选C/S模式进行开发。如，知名的网络游戏魔兽世界。3D画面，数据量庞大，使
	用C/S模式可以提前在本地进行大量数据的缓存处理，从而提高观感。
		C/S模式的缺点也较突出。由于客户端和服务器都需要由一个开发团队来完成开发。工作量将成倍提升。开发周期较长。另外，从用户角
	度出发，需要将客户端安插至用户主机上，对用户主机的安全性构成威胁。这也是很多用户不愿意使用C/S模式应用程序的重要原因。
		B/S模式相较C/S模式而言，由于没有独立的客户端，使用标准浏览器做为客户端，其工作开发量较小。只需开发服务器端即可。另外由于
	采用浏览器显示数据，因此移植性非常好，不受平台限制。如早期的偷菜游戏，在各个平台上都可以完美运行。
		B/S模式的缺点也较明显。由于使用第三方浏览器，因此网络应用支持受限。另外，没有客户端放到对方主机上，缓存数据不尽如人意，从
	而传输数据量受到限制。应用观感大打折扣。第三，必须与浏览器一样，采用标准http协议进行通信，协议选择不灵活。
socket编程
	套接字概念
		socket本身有“插座”的意思，在Linux环境下，用于表示进程间网络通信的特殊文件类型。本质为内核借助缓冲区形成的伪文件。
		既然是文件，那么理所应当，我们可以使用文件描述符引用套接字。与管道类似的，Linux系统将其封装成文件的目的会为了同一接口，使
	得读写套接字和读写文件的操作一致。区别是管道主要应用于本地进程间通信，而套接字多用于网络进程间数据的传递。
		套接字的内核实现较为复杂。
		在TCP/IP协议中，“IP地址+TCP或UDP端口号”唯一标识网络通信中的一个进程。“IP地址+端口号”就对应一个socket。欲建立连接到两个进程
	各自有一个socket来标识，那么这两个socket组成的socket pair就唯一标识一个连接。因此可以用socket来描述网络连接的一对一关系。
		在网络通信中，套接字一定是成对出现的。一端的发送缓冲区对应对端的接收缓冲区。使用同一个文件描述符索发送缓冲区和接收缓冲区。
网络字节序
		我么已经知道，内存中的多字节数据相对于内存地址有大端和小端之分，磁盘文件中的多字节数据相对于文件中的偏移量地址也有大端小端
	之分。网络数据流同样有大端小端之分，那么如何定义网络数据流的地址呢？发送主机通常将发送缓冲区中的数据按内存地址从低到高的顺序发
	出，接收主机把从网络上接收到的字节一次保存在接收缓冲区中，也是按照内存地址从低到高的顺序保存。因此，网络数据流的地址样规定：先
	发出的地址是地地址，后发出的地址是高地址。
		TCP/IP协议规定，网络数据流应采用大端字节序，即地地址高字节。如果发送主机是小端字节序，那么主机将数据发送到缓冲区之前需要做
	字节转换。同样，如果接收端主机是小端字节序，接收到端口号同样需要做字节转换。如果主机是大端字节序，发送和接收都不需要转换。为了
	使网络程序具有可移植性，是同样的c代码在大端和小端计算机上编译后都能正常运行，可以调用以下库函数做网络字节序和主机字节序的转换。
		#include <arpa/inet.h>
		uint32_t htonl(uint32_t hostlong);
		uint16_t htons(uint16_t hostshort);
		uint32_t ntohl(uint32_t netlong);
		uint16_t ntohs(uint16_t netshort);
		h表示host，n表示network，l表示32位长整数，s表示16位短整数。
		如果主机是小端字节序，这些函数将参数做相应的大小端转换然后返回，如果主机是大端字节序，这些函数不做转换，将参数原封不动返回。
	IP地址转换函数
		#include <arpa/inet.h>
		int inet_pton(int af, const char *src, void *dst);
		const char *inet_ntop(int af, const void *src, char *dst, socklen_t size);
		支持IPV4和IPV6
socketaddr数据结构
		struct sockaddr很多网络编程函数诞生早于IPV4协议，那时候都是用的是sockaddr结构体，为了向前兼容，现在sockaddr退化成了(void*)
	的作用，传递一个地址给函数，至于这个函数是sockaddr_in还是sockaddr_in6，由地址族确定，然后函数内部在强制类型转换为所需的地址类型。
		struct sockaddr_in addr;
		addr.sin_family = AF_INET/AF_INET6;
		addr.sin_port = htons/ntohs;
		addr.sin_addr.s_addr = htonl;ntosl;inet_pton;inet_ntop;
网络套接字函数
	#include <sys/types.h>
	#include <sys/socket.h>
	socket函数
		int socket(int domain, int type, int protocol);
		domain:
			AF_INET 这是大多数用来产生socket的协议，使用TCP或UDP来传输，用IPV4的地址。
			AF_INET6 与上面类似，不过使用IPV6的地址。
			AF_UNIX 本地协议，使用在Unix和Linux系统上，一般都是当客户端和服务器在同一台计算机上的时候使用
		tyep：
			SOCK_STREAM 这个协议是顺序的、可靠的、数据完整的基于字节流的连接。这是使用最多的socket类型，这个socket使用TCP来进行传输。
			SOCK_DGRAM 这个协议是无连接的、固定长度的传输调用。该协议是不可靠的，使用UDP来进行它的连接。
			SOCK_SEQPACKET 该协议是双线路的、可靠的连接，发送固定长度的数据包进行传输。必须把这个包完整的接收才能进行读取。
			SOCK_RAW socket类型提供单一的网络访问，这个socket类型使用ICMP公共协议。(ping、traceroute使用该协议)
			SOCK_RDM 这个类型很少使用，在大部分操作系统没有实现，它是提供给数据链路层使用，不保证数据包的顺序
		protocol：
			传0表示默认协议。
		返回值：
			成功：返回指向新创建的socket的文件描述符，失败返回-1，设置errno
	bind函数
		int bind(int sockfd, const struct socketaddr *addr, socklen_t addrlen);
		sockfd：文件描述符
		addr：构造出IP地址加端口号
		addrlen：sizeof(addr)长度
		返回值：成功0，失败-1，设置errno
			服务器程序所监听的网络地址和端口号通常是固定不变的，客户端程序得知服务器程序的地址和端口号后就可以向服务器发起连接，因此
		服务器需要调用bind绑定一个固定的网络地址和端口号。
			bind()的作用是将参数sockfd和addr绑定在一起，使用sockfd这个用于网络通讯的文件描述符监听addr所描述的地址和端口号。前面讲过，
		struct sockaddr *是一个通用指针类型，addr参数实际上是可以接受多种协议的sockaddr结构体，而它们的长度各不相同，所以需要第三个参
		数addrlen指定结构体的长度。
	listen函数
		int listen(int sockfd, int backlog);
		sockfd：文件描述符
		backlog：排队建立3次握手队列和刚刚建立3次握手队列的链接数和。
		查看系统默认backlog：cat /proc/sys/net/ipv4/tcp_max_syn_backlog
			典型的服务器程序可以同时服务于多个客户端，当有客户端发起连接时，服务器调用的accept()返回接受这个连接，如果有大量的客户端发
		起连接而服务器来不及处理，尚未accept的客户端就处于等待状态，listen()声明sockfd处于监听状态，并且最多允许有backlog个客户端处于等
		待状态，如果接受到更多的请求就忽略。listen()成功返回0，失败返回-1。
	accept函数
		int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
		sockdf：socket文件描述符
		addr：传出参数，返回链接客户端地址信息，含IP地址和端口号
		addrlen：传入传出参数(值-结果)，传入sizeof(addr)大小，函数返回时返回真正接收到的地址结构体大小
		返回值：成功返回一个新的socket文件描述符，用于和客户端通信。失败返回-1，设置errno
			三次握手完成后，服务器调用accept()接受连接，如果服务器调用accept()时还没有客户端的连接请求，就阻塞等待直到有客户端连接上来。
		addr是一个传出参数，accept()返回时传出客户端的地址和端口号。addrlen参数是一个传入传出参数，传入的是调用者提供的缓冲区addr的长度
		以避免缓冲区溢出问题，传出的是客户端地址结构体的实际长度(有可能没有占满调用者提供的缓冲区)。如果给addr参数传NULL，表示不关心客户
		端的地址。
	connect函数
		int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
		sockfd：文件描述符
		addr：传入参数，指定服务器端地址信息，含IP地址和端口号
		addrlen：传入参数，传入sizeof(addr)大小
		返回值：成功0，失败-1，设置errno
			客户端需要调用connect()连接服务器，connect和bind的参数形式一致，区别在于bind的参数是自己的地址，而connect的参数是对方的地址，
		connect()成功返回0，出错返回-1。
错误处理
	read返回值：
		1、> 0 实际读到的字节数，① == buf ② < buf读到文件尾
		2、= 0 数据读完(读到文件、管道、socket 末尾 -- 对端关闭)
		3、-1  异常
			1、errno = EINTR 被信号中断 重启/quit
			2、errno = EAGAIN(EWOULDBLOCK) 非阻塞方式读，并且没有数据
			3、其他 出错 -- perror exit
	readn函数：
		ssize_t readn(int fd, void *vptr, size_t n)	// 读取指定字节数
		{
			size_t  nleft;		// unsigned int 剩余未读取的字节数
			ssize_t nread;		// int 实际读到的字节数
			char *ptr;
			
			ptr = vptr;
			nleft = n;			// n 未读取字节数
			
			while (nleft > 0)
			{
				if ((nread = read(fd, ptr, nleft)) < 0)
				{
					if (errno == EINTR)
						nread = 0;
					else
						return -1;
				}
				else if (nread == 0)
					break;
				nleft -= nread;
				ptr += nread;
			}
			return n-nleft;
		}
	
	static ssize_t my_read(int fd, char *ptr)
	{
		static int read_cnt;
		static char *read_ptr;
		static char read_buf[100];
		
		if (read_cnt <= 0)
		{
	again:
			if ((read_cnt = read(fd, read_buf, sizeof(read_buf))) < 0)
			{
				if (errno == EINTR)
					goto again;
				return -1;
			}
			else if (read_cnt == 0)
				return 0;
			read_ptr = read_buf;
		}
		read_cnt --;
		*ptr = *read_ptr ++;
		return 1;
	}
	
	ssize_t readline(int fd, void *vptr, size_t maxlen)
	{
		ssize_t n, rc;
		char c, *ptr;
		ptr = vptr;
		
		for (n = 1; n < maxlen; n ++)
		{
			if ((rc = my_read(fd, &c)) == 1)
			{
				*ptr ++ = c;
				if (c == '\n')
					break;
			}
			else if (rc == 0)
			{
				*ptr = 0;
				return n-1;
			}
			else
				return -1;
		}
		*ptr = 0;
		return n;
	}
滑动窗口(TCP流量控制)
		如果发送端发送速度比较快，接收端接收到数据后处理速度比较慢，而接收缓冲区的大小是固定的，就会丢失数据。TCP协议通过“滑动窗口”机制
	解决这一问题。
	1、发送端发起连接，声明最大尺寸1460，初始序号是0，窗口大小是4k，表示“我的接收缓冲区还有4k字节空间，你发的数据不要超过4k”。接收端应答
	   连接请求，声明最大尺寸是1024，初始序号是8000，窗口大小是6k。发送端应答，三次握手结束。
	2、发送端发出段4-9，每个段带1k数据，发送端根据窗口大小知道接收端的缓冲区满了，因此停止发送数据。
	3、接收端的应用程序提走2k数据，接收缓冲区又有了2k空闲，接收端发出段10，在应答已收到6k数据的同时声明窗口大小为2k。
	4、接收端的应用程序又提走2k数据，接收缓冲区有4k空闲，接收端发出段11，重新声明窗口大小为4k。
	5、发送端发出段12-13，每个段带2k数据，段13同时还包含FIN位。
	6、接收端应答接收到的2k数据(6145-8192)，再加上FIN位占一个序号8193，因此应答序号是8194，连接处于半关闭状态，接收端同时声明窗口大小为2k。
	7、接收端的应用程序提走2k数据，接收端重新声明窗口大小为4k。
	8、接收端的应用程序提走剩下的2k数据，接收缓冲区全空，接收端重新声明窗口大小为6k。
	9、接收端的应用程序在提走全部数据后，决定关闭连接，发出段17包含FIN位，发送端应答，连接完全关闭。
TCP状态转换
	CLOSED：表示初始状态。
	LISTEN：该状态表示服务器端的某个SOCKET处于监听状态，可以接受连接。
	SYN_SENT：这个状态与SYN_RCVD遥相呼应，当客户端SOCKET执行CONNECT连接时，它首先发送SYN报文，随机进入到了SYN_SENT状态，并等待服务器端的
		发送三次握手中的第二个报文。SYN_SENT状态表示客户端已发送SYN报文。
	SYN_RCVD：该状态表示接收到SYN报文，在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂。
		此种状态时，当接收到客户端的ACK报文后，会进入到ESTABLISHED状态。
	ESTABLISHED：表示连接已经建立。
	FIN_WAIT_1：FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是等待对方的FIN报文。区别是：
			FIN_WAIT_1状态是当socket在ESTABLISHED状态时，想主动关闭连接，向对方发送了FIN报文，此时该socket进入到FIN_WAIT_1状态。
			FIN_WAIT_2状态是当对方回应ACK后，该socket进入到FIN_WAIT_2状态，正常情况下，对方马上回应ACK报文，所以FIN_WAIT_1状态一般是较难
		见到，而FIN_WAIT_2状态可用netstat看到。
	FIN_WAIT_2：主动关闭连接的一方，发出FIN收到ACK以后进入该状态。称之为半连接或半关闭状态。改状态下的socket只能接收数据，不能发。
	TIME_WAIT：表示收到了对方的FIN报文，并发送出了ACK报文，等2MSL后即可回到CLOSED可用状态。如果FIN_WAIT_1状态下，收到对方同时带FIN标志和
		ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。
	CLOSING：这种状态比较特殊，属于一种较罕见的状态。正常情况下，当你发送FIN报文后，按理说是应该先接收到(或同时收到)对方的ACK报文，在收到
		对方的FIN报文。但是CLOSING状态表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现这种情况
		呢？如果双方几乎在用时close一个socket的话，那么就出现了双方同时发送FIN报文的情况下，也即会出现CLOSING状态，表示双方都在关闭socket
		连接。
	CLOSE_WAIT：此种状态表示在等待关闭。当对方关闭一个socket后发送FIN报文给自己，系统会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。
		接下来，查看是否还有数据发送给对方，如果没有可以close这个socket，发送FIN报文给对方，即关闭连接。所以在CLOSE_WAIT状态下，需要关闭连
		接。
	LAST_ACK：该状态是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，即可以进入到CLOSED可用状态。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
		
		
		
		
		